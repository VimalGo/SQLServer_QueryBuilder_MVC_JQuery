#pragma checksum "F:\My Data\My Projects\5.Practice Projects\SQLServer_QueryBuilder\SQLServer_QueryBuilder_Core_MVC\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5a0517c69a3454938e8fb32599ca02f799b453eb"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\My Data\My Projects\5.Practice Projects\SQLServer_QueryBuilder\SQLServer_QueryBuilder_Core_MVC\Views\_ViewImports.cshtml"
using SQLServer_QueryBuilder_Core_MVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\My Data\My Projects\5.Practice Projects\SQLServer_QueryBuilder\SQLServer_QueryBuilder_Core_MVC\Views\_ViewImports.cshtml"
using SQLServer_QueryBuilder_Core_MVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5a0517c69a3454938e8fb32599ca02f799b453eb", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"564db5d3617662de86c51cd5c5c3c3e9eb782669", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "-1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "3", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "F:\My Data\My Projects\5.Practice Projects\SQLServer_QueryBuilder\SQLServer_QueryBuilder_Core_MVC\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div>
    <div class=""control-group"">
        <label class=""control-label"">SERVER DETAILS</label>
    </div>

    <div class=""control-group"">
        <label class=""control-label"" for=""txtServerName"">Server Name: </label>
        <div class=""controls col-lg-5 col-md-10"">
            <input id=""txtServerName"" name=""txtServerName"" class=""serverDetails"" type=""text"" style=""width:50%;"" />
        </div>
    </div>

    <div class=""control-group"" style=""margin-top:10px;"">
        <label class=""control-label"">User Name: </label>
        <div class=""col-lg-5 col-md-10"">
            <input id=""txtUserName"" class=""serverDetails"" type=""text"" style=""width:50%;"" />
        </div>
    </div>

    <div class=""control-group"" style=""margin-top:10px;"">
        <label class=""control-label"">Password: </label>
        <div class=""col-lg-5 col-md-10"">
            <input id=""txtPassword"" class=""serverDetails"" type=""text"" style=""width:50%;"" />
        </div>
    </div>

    <div class=""control-group"" style");
            WriteLiteral(@"=""margin-top:10px;"">
        <label class=""control-label"">Database Name: </label>
        <div class=""col-lg-5 col-md-10"">
            <input id=""txtDatabaseName"" class=""serverDetails"" type=""text"" style=""width:50%;"" />
        </div>
    </div>

    <div id=""dvConnString"" class=""control-group"" style=""margin-top:10px;"">
        <label class=""control-label"">Connection String: </label>
        <div class=""col-lg-12 col-md-12"">
            <input id=""txtConnString"" type=""text"" placeholder=""Insert Connection String here..."" style=""width:90%;"" readonly />
        </div>
    </div>

    <div class=""control-group"" style=""margin-top:10px;"">
        <div class=""col-lg-5 col-md-10"">
            <input type=""button"" id=""btnGetTables"" value=""Get Tables"" title=""Get Tables"" />
        </div>
    </div>

    <div id=""divDatabaseTables"" class=""control-group"" style=""margin-top:10px;"">

    </div>

    <div id=""divColumns"" class=""control-group"" style=""margin-top:10px;"">
        <div>
            <span ");
            WriteLiteral(@"id=""spSelectAll"">Select All Columns: </span><input id=""selectAll"" type=""checkbox"" />
        </div>
        <div id=""dvColumns"" style=""margin-top:10px; margin-left:30px;"">

        </div>
    </div>

    <div id=""divQueryType"" class=""control-group"" style=""margin-top:10px;"">
        <label class=""control-label"">Query Type:</label>
        <br />
        <div class=""col-lg-10 col-md-10"">
            <select id=""ddQueryType"" style=""width:30%;"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5a0517c69a3454938e8fb32599ca02f799b453eb7365", async() => {
                WriteLiteral("-- SELECT --");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5a0517c69a3454938e8fb32599ca02f799b453eb8546", async() => {
                WriteLiteral("INSERT");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5a0517c69a3454938e8fb32599ca02f799b453eb9721", async() => {
                WriteLiteral("UPDATE");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "5a0517c69a3454938e8fb32599ca02f799b453eb10896", async() => {
                WriteLiteral("DELETE");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </select>
            <br />
            <input type=""button"" id=""btnGenerateQuery"" value=""Generate Query"" title=""Generate Query"" style=""margin-top:10px;"" />
        </div>
    </div>

    <div id=""divQueryTextArea"" class=""control-group"" style=""margin-top:10px;"">
        <label class=""control-label"">Generate Query: </label>
        <div class=""col-lg-12 col-md-12"">
            <textarea id=""queryTextArea"" name=""queryTextArea"" rows=""10"" cols=""30"" style=""width:90%; height:30%;""></textarea>
        </div>
    </div>
</div>

");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(document).ready(function () {
            $(""#dvConnString"").hide();
            $(""#divQueryType"").hide();
            $(""#divQueryTextArea"").hide();
            $(""#divColumns"").hide();

            let connectionString = '';
            let columnList = [];
            let selectedColumns = [];
            let insertColumnList;
            let updateColumnList;

            function ShowHideGetDatabaseButton() {
                let value = $(""#txtConnString"").val();

                if (value == '' || value == null) {
                    $(""#btnGetTables"").hide();
                } else {
                    $(""#btnGetTables"").show();
                }
            }

            function ShowHideControls() {
                let selectedValue = $(""#ddDatabaseTables :selected"").val();

                if (selectedValue == '-- Select --') {
                    $(""#divQueryType"").hide();
                } else {
                    $(""#divQueryType"").show()");
                WriteLiteral(@";
                }
            }

            function ChangeSelectAllCheckBox(checkbox) {
                debugger;
                var selectedCheckbox = checkbox;

                let checkedCount = $(""#dvColumns input:checked"").length;

                if (checkedCount === columnList.length) {
                    $('#selectAll').prop('checked', true);
                } else {
                    $('#selectAll').prop('checked', false);
                }
            }

            ShowHideGetDatabaseButton();

            function ValidateServerDetails(ctrlId, ctrlValue) {
                if (ctrlId === 'txtServerName' && ctrlValue === '') {
                    alert(""Server Name is required."");
                    return;
                } else if (ctrlId === 'txtUserName' && ctrlValue === '') {
                    alert(""User Name is required."");
                    return;
                } else if (ctrlId === 'txtPassword' && ctrlValue === '') {
                    alert(""Pas");
                WriteLiteral(@"sword is required."");
                    return;
                }
                else if (ctrlId === 'txtDatabaseName' && ctrlValue === '') {
                    alert(""Database Name is required."");
                    return;
                }

                return true;
            }

            $("".serverDetails"").blur(function () {
                let ctrl = this;
                let ctrlId = $(this).prop('id');
                let ctrlValue = $(this).val();
                connectionString = '';

                if (ctrlId === 'txtServerName' && ctrlValue === '') {
                    alert(""Server Name is required."");
                    return;
                } else if (ctrlId === 'txtUserName' && ctrlValue === '') {
                    alert(""User Name is required."");
                    return;
                } else if (ctrlId === 'txtPassword' && ctrlValue === '') {
                    alert(""Password is required."");
                    return;
                }
  ");
                WriteLiteral(@"              else if (ctrlId === 'txtDatabaseName' && ctrlValue === '') {
                    alert(""Database Name is required."");
                    return;
                }

                if ($('#txtServerName').val() !== '' && $('#txtDatabaseName').val() !== '' && $('#txtUserName').val() !== '' && $('#txtPassword').val() !== '') {
                    connectionString = `SERVER=${$('#txtServerName').val()}; Initial Catalog=${$('#txtDatabaseName').val()}; USER ID=${$('#txtUserName').val()}; PASSWORD=${$('#txtPassword').val()}`;

                    $('#txtConnString').val(connectionString);
                    $('#dvConnString').show();
                    $('#btnGetTables').show();
                } else {
                    $('#txtConnString').val(connectionString);
                    $('#dvConnString').hide();
                    $('#btnGetTables').hide();
                }
            });

            $('#txtConnString').blur(function () {
                ShowHideGetDatabaseButt");
                WriteLiteral(@"on();
            });

            //$('#txtConnString').change(function () {
            //    ShowHideGetDatabaseButton();
            //});

            $('#btnGetTables').click(function () {
                $('#divDatabaseTables').html('');
                $('#dvColumns').html('');
                $('#spSelectAll').hide();
                $('#selectAll').hide();
                $('#selectAll').prop('checked', false);
                $('#divQueryType').hide();
                $('#ddQueryType').val(-1);
                $('#btnGenerateQuery').hide();
                $('#divQueryTextArea').hide();
                $('#divQueryTextArea').val();

                let connString = $('#txtConnString').val();

                $.ajax({
                    url: '/Home/GetTableList',
                    data: { connString: connString },
                    type: ""POST"",
                    async: true,
                    cache: false,
                    success: function (data) {
         ");
                WriteLiteral(@"               let tableList = data.toString().split("","");
                        let tableCount = tableList.length;

                        $('#divDatabaseTables').append($(""<label class='control-label'>Tables:</label> <br />""));
                        $('#divDatabaseTables').append($(""<div id='dvInternalDatabaseTables' class='col-lg-5 col-md-10'> </div>""));

                        //$('#dvInternalDatabaseTables').append($(""<select id='ddDatabaseTables' onchange='ShowHideControls()'>""));
                        $('#dvInternalDatabaseTables').append($(""<select id='ddDatabaseTables'>""));

                        $('#ddDatabaseTables').append($(""<option />"").val(""-- Select --"").text(""-- Select --""));

                        for (var i = 0; i < tableCount; i++) {
                            $('#ddDatabaseTables').append($(""<option />"").val(tableList[i]).text(tableList[i]));
                        }

                        $(""#dvInternalDatabaseTables"").append($(""</select>""));
             ");
                WriteLiteral(@"           /*$(""#divDatabaseTables"").append($(""</div>""));*/

                        //$('#selectAll').show();
                        //$('#divQueryType').show();
                        //$('#btnGenerateQuery').show();
                        //$('#divQueryTextArea').show();
                    },
                    error: function (data, status, jqXHR) {
                        alert(""Error while getting table list."");
                    }
                });
            });

            ////Table List Dropdown Change Event
            $(document).on(""change"", '#ddDatabaseTables', function () {
                $('#spSelectAll').show();
                $('#selectAll').show();
                $('#selectAll').prop('checked', false);
                $('#divQueryTextArea').hide();

                let selectedValue = $('#ddDatabaseTables :selected').val();

                if (selectedValue == '-- Select --') {
                    $('#divColumns').hide();
                    $('#divQue");
                WriteLiteral(@"ryType').hide();
                    $('#divQueryTextArea').hide();

                    $('#ddQueryType').val(-1);
                    $('#queryTextArea').val('');
                    columnList.length = 0;
                    selectedColumns.length = 0;
                } else {
                    $('#divQueryType').show();
                    $('#divColumns').show();
                    $('#btnGenerateQuery').show();
                    /*$('#divQueryTextArea').show();*/

                    $('#ddQueryType').val(-1);
                    $('#queryTextArea').val('');
                    columnList.length = 0;
                    selectedColumns.length = 0;

                    $.ajax({
                        url: '/Home/GetTableColumnList',
                        data: { tableName: selectedValue },
                        type: ""POST"",
                        async: true,
                        cache: false,
                        success: function (data) {
                     ");
                WriteLiteral(@"       $('#dvColumns').html('');

                            let colList = data.toString().split("","");
                            columnList = colList;
                            let tableCount = colList.length;

                            for (var i = 0; i < tableCount; i++) {
                                var columnEl = ""<div> <input id='"" + colList[i] + ""' type='checkbox' class='columnCheckboxChanged' />"" + "" "" + colList[i] + ""</div>"";
                                $(""#dvColumns"").append(columnEl);
                            }
                        },
                        error: function (data, status, jqXHR) {
                            alert(""Error while getting table list."");
                        }
                    });
                }
            });

            $(document).on(""click"", "".columnCheckboxChanged"", function () {
                var selectedCheckbox = this;

                let checkedCount = $('#dvColumns input:checked').length;
                ");
                WriteLiteral(@"if (checkedCount === columnList.length) {
                    $('#selectAll').prop('checked', true);
                } else {
                    $('#selectAll').prop('checked', false);
                }
            });

            /*$(document).on(""change"", ""#selectAll input:checkbox"", function () {*/
            /*$(document).on(""click"", ""input[id='#selectAll']"", function () {*/
            $(document).on(""click"", ""#selectAll"", function () {
                $('#divQueryTextArea').hide();
                $('#ddQueryType').val(-1);
                $('#queryTextArea').val('');

                let isChecked = $(this).is(':checked');
                let tableCount = columnList.length;

                if (isChecked) {
                    for (var i = 0; i < tableCount; i++) {
                        let columnId = columnList[i];
                        $(""#"" + columnId).prop('checked', 'checked');

                        //selectedColumns.push(columnId);
                    }

       ");
                WriteLiteral(@"             //insertColumnList = selectedColumns.join("", "");
                } else {
                    for (var i = 0; i < tableCount; i++) {
                        let columnId = columnList[i];
                        $(""#"" + columnId).prop('checked', false);
                    }

                    //selectedColumns.length = 0;

                    //insertColumnList = '';
                }
            });

            ///Not working
            //$('#selectAll input:checkbox').change(function () {
            //    let isChecked = $(this).is(':checked');

            //    if (isChecked) {
            //        let tableCount = columnList.length;

            //        for (var i = 0; i < tableCount; i++) {
            //            let columnId = columnList[i];
            //            $('#' + columnId).prop('checked', 'checked');
            //        }
            //    }
            //});

            $(document).on(""change"", ""#ddQueryType"", function () {
           ");
                WriteLiteral(@"     //let selectedValue = $(""#ddQueryType :selected"").val();
                //let selectedTableName = $(""#ddDatabaseTables :selected"").val();

                //if (selectedValue == '-1') {
                //    $(""#divQueryTextArea"").hide();
                //} else {
                //    $(""#queryTextArea"").val('');

                //    $('#dvColumns input:checked').each(function () {
                //        selectedColumns.push($(this).attr('id'));
                //    });

                //    if (selectedValue === '1') {
                //        insertColumnList = selectedColumns.join("", "");
                //        $(""#queryTextArea"").val(""INSERT INTO "" + selectedTableName + ""("" + insertColumnList + "") VALUES( )"");
                //    } else if (selectedValue === '2') {
                //        $(""#queryTextArea"").val(""UPDATE "" + selectedTableName + "" SET "");
                //    } else if (selectedValue === '3') {
                //        $(""#queryTextArea"").val(""DELET");
                WriteLiteral(@"E FROM "" + selectedTableName);
                //    }

                //    $(""#divQueryTextArea"").show();
                //}
            });

            ////NOT WORKING Change and On
            //$(""#ddDatabaseTables"").on(""change"", function () {
            //    let selectedValue = $(""#ddDatabaseTables :selected"").val();

            //    if (selectedValue == '-- Select --') {
            //        $(""#divQueryType"").hide();
            //    } else {
            //        $(""#divQueryType"").show();
            //    }
            //});
            //$(""#ddDatabaseTables"").change(function () {
            //    let selectedValue = $(""#ddDatabaseTables :selected"").val();

            //    if (selectedValue == '-- Select --') {
            //        $(""#divQueryType"").hide();
            //    } else {
            //        $(""#divQueryType"").show();
            //    }
            //});

            $('#btnGenerateQuery').click(function () {
                $('#divQueryText");
                WriteLiteral(@"Area').show();
                $('#queryTextArea').val('');
                selectedColumns.length = 0;
                insertColumnList = '';
                updateColumnList = '';

                let selectedQueryType = $(""#ddQueryType :selected"").val();
                let selectedTableName = $(""#ddDatabaseTables :selected"").val();

                if (selectedQueryType == '-1') {
                    $(""#divQueryTextArea"").hide();
                    $(""#queryTextArea"").val('');
                    alert('Please select Query Type to generate query.');
                } else {
                    $('#dvColumns input:checked').each(function () {
                        selectedColumns.push($(this).attr('id'));
                    });

                    if (selectedQueryType === '1') {
                        insertColumnList = selectedColumns.join("", "");
                        $(""#queryTextArea"").val(""INSERT INTO "" + selectedTableName + ""("" + insertColumnList + "") VALUES ( )"");
     ");
                WriteLiteral(@"               } else if (selectedQueryType === '2') {
                        updateColumnList = selectedColumns.join("" =  ,  "");
                        $(""#queryTextArea"").val(""UPDATE "" + selectedTableName + "" SET "" + updateColumnList + ""= WHERE "");
                    } else if (selectedQueryType === '3') {
                        $(""#queryTextArea"").val(""DELETE FROM "" + selectedTableName + "" WHERE "");
                    }

                    $(""#divQueryTextArea"").show();
                }
            });
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
